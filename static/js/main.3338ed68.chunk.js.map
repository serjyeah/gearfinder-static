{"version":3,"sources":["logo.svg","App.js","Form.js","serviceWorker.js","index.js"],"names":["module","exports","MyComponent","props","state","error","isLoaded","order_status","order_id","handleFormSubmit","bind","handleChange","event","this","setState","target","value","e","preventDefault","url","fetch","crossDomain","method","then","response","text","result","message","onSubmit","name","id","onChange","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,kKCoG5BC,G,8DA9Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,aAAc,GACdC,SAAU,IAEZ,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATH,E,yDAWNE,GAEXC,KAAKC,SAAS,CAACN,SAAUI,EAAMG,OAAOC,U,gFAEhBC,G,qFAGtBA,EAAEC,iBAGEC,EAAM,mDAAmDN,KAAKT,MAAMI,S,SAGjEY,MAAMD,EAAK,CAACE,aAAY,EAAMC,OAAQ,QAC3CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC/BF,MAAK,SAAAG,GAGE,EAAKZ,SAAS,CAEZR,UAAU,EACVC,aAAcmB,O,oXAuCZ,IAAD,EAE8Cb,KAAKT,MAAlDC,EAFD,EAECA,MAAOC,EAFR,EAEQA,SAFR,EAEmBC,aAFnB,EAEiCC,SAExC,OAAIH,EACK,uCAAaA,EAAMsB,SAChBrB,EAIV,6BACA,4BAAKO,KAAKT,MAAMG,cAChB,0BAAMqB,SAAUf,KAAKJ,kBAAkB,4CAAwB,2BAAOoB,KAAK,WAAWC,GAAG,WAAWd,MAAOH,KAAKT,MAAMI,SAAWuB,SAAUlB,KAAKF,eAC9I,2BAAOqB,KAAK,SAAShB,MAAM,YAH7B,KAHO,+C,GA/EaiB,IAAMC,YCHbD,IAAMC,UCULC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACL8C,QAAQ9C,MAAMA,EAAMsB,c","file":"static/js/main.3338ed68.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: true,\n      order_status: \"\",\n      order_id: \"\"\n    };\n    this.handleFormSubmit = this.handleFormSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    \n    this.setState({order_id: event.target.value});\n  }\n  async handleFormSubmit (e) {\n    //const { error, isLoaded,  order_status } = this.state;\n    \n    e.preventDefault();\n    \n    //let url = \"https://sheets.googleapis.com//v4/spreadsheets/13stVPhysibNEOZtRejKi5pQwp3B2tiI22SK21-ldhFU/values/Sheet1!A1:C5?key=AIzaSyDE5_AJLePiS8GAexnyojj8ZUUxOU694iA\";\n    let url = 'https://my-app-1.serjshaklein.workers.dev/order/'+this.state.order_id;\n    //let url = 'http://127.0.0.1:8787/order/'+this.state.order_id;\n    //let url = 'https://api.github.com/repos/javascript-tutorial/en.javascript.info/commits';\n     await fetch(url, {crossDomain:true, method: 'GET'})\n     .then(response => response.text())\n.then(result => {\n  \n  \n        this.setState({\n          \n          isLoaded: true,\n          order_status: result\n      })\n})\n  }\n   async componentDidMount() {\n    \n   \n     \n    \n  //.then(commits => alert(commits[0].author.login));\n\n    /*\n    await fetch(url, {\n      mode: 'no-cors'\n    })\n      //.then(res => res.json())\n      .then(res => console.log(res))\n      .then(\n        (result) => {\n          console.log(result)\n          this.setState({\n            isLoaded: true,\n            //items: result.items\n            \n\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )*/\n  }\n\n  render() {\n    \n    const { error, isLoaded,  order_status, order_id } = this.state;\n   \n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n      <div>\n      <h1>{this.state.order_status}</h1>\n      <form onSubmit={this.handleFormSubmit}><label>Order ID:</label><input name=\"order_id\" id=\"order_id\" value={this.state.order_id } onChange={this.handleChange}  />\n        <input type=\"submit\" value=\"Submit\" />\n        </form>>\n      </div>\n      )\n    }\n  }\n}\n\n\n\nexport default MyComponent;\n","import React from 'react';\n\nclass Form extends React.Component {\n\n\n    handleFormSubmit(e) {\n        // Form submission logic\n        e.preventDefault();\n        console.log('submit');\n      }\n\n    render() {\n      \n      \n        return (\n        <form onSubmit={this.handleFormSubmit}><label>Order ID:</label><input name=\"order_id\"></input>\n        <input type=\"submit\" value=\"Submit\" />\n        </form>\n         \n        );\n      \n    }\n  }\n\n  export default Form;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport App from './App';\nimport Form from './Form'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}